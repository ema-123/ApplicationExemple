/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etgdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import ch.etg.application.exemple.etgdb.Commande;

/**
 * Service object for domain model class {@link Commande}.
 */
public interface CommandeService {

    /**
     * Creates a new Commande. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Commande if any.
     *
     * @param commande Details of the Commande to be created; value cannot be null.
     * @return The newly created Commande.
     */
	Commande create(@Valid Commande commande);


	/**
	 * Returns Commande by given id if exists.
	 *
	 * @param commandeId The id of the Commande to get; value cannot be null.
	 * @return Commande associated with the given commandeId.
     * @throws EntityNotFoundException If no Commande is found.
	 */
	Commande getById(Integer commandeId) throws EntityNotFoundException;

    /**
	 * Find and return the Commande by given id if exists, returns null otherwise.
	 *
	 * @param commandeId The id of the Commande to get; value cannot be null.
	 * @return Commande associated with the given commandeId.
	 */
	Commande findById(Integer commandeId);

    /**
	 * Find and return the Commande for given numero  if exists.
	 *
	 * @param numero value of numero; value cannot be null.
	 * @return Commande associated with the given inputs.
     * @throws EntityNotFoundException if no matching Commande found.
	 */
    Commande getByNumero(int numero)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing Commande. It replaces all fields of the existing Commande with the given commande.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Commande if any.
     *
	 * @param commande The details of the Commande to be updated; value cannot be null.
	 * @return The updated Commande.
	 * @throws EntityNotFoundException if no Commande is found with given input.
	 */
	Commande update(@Valid Commande commande) throws EntityNotFoundException;

    /**
	 * Deletes an existing Commande with the given id.
	 *
	 * @param commandeId The id of the Commande to be deleted; value cannot be null.
	 * @return The deleted Commande.
	 * @throws EntityNotFoundException if no Commande found with the given id.
	 */
	Commande delete(Integer commandeId) throws EntityNotFoundException;

    /**
	 * Deletes an existing Commande with the given object.
	 *
	 * @param commande The instance of the Commande to be deleted; value cannot be null.
	 */
	void delete(Commande commande);

	/**
	 * Find all Commandes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Commandes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Commande> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Commandes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Commandes.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Commande> findAll(String query, Pageable pageable);

    /**
	 * Exports all Commandes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Commandes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Commande.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

