/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etgdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import ch.etg.application.exemple.etgdb.Article;
import ch.etg.application.exemple.etgdb.LigneCommande;
import ch.etg.application.exemple.etgdb.service.ArticleService;


/**
 * Controller object for domain model class Article.
 * @see Article
 */
@RestController("EtgDb.ArticleController")
@Api(value = "ArticleController", description = "Exposes APIs to work with Article resource.")
@RequestMapping("/EtgDb/Article")
public class ArticleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ArticleController.class);

    @Autowired
	@Qualifier("EtgDb.ArticleService")
	private ArticleService articleService;

	@ApiOperation(value = "Creates a new Article instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Article createArticle(@RequestBody Article article) {
		LOGGER.debug("Create Article with information: {}" , article);

		article = articleService.create(article);
		LOGGER.debug("Created Article with information: {}" , article);

	    return article;
	}

    @ApiOperation(value = "Returns the Article instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Article getArticle(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Article with id: {}" , id);

        Article foundArticle = articleService.getById(id);
        LOGGER.debug("Article details with id: {}" , foundArticle);

        return foundArticle;
    }

    @ApiOperation(value = "Updates the Article instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Article editArticle(@PathVariable("id") Integer id, @RequestBody Article article) throws EntityNotFoundException {
        LOGGER.debug("Editing Article with id: {}" , article.getId());

        article.setId(id);
        article = articleService.update(article);
        LOGGER.debug("Article details with id: {}" , article);

        return article;
    }

    @ApiOperation(value = "Deletes the Article instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteArticle(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Article with id: {}" , id);

        Article deletedArticle = articleService.delete(id);

        return deletedArticle != null;
    }

    @RequestMapping(value = "/numero/{numero}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Article with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Article getByNumero(@PathVariable("numero") int numero) {
        LOGGER.debug("Getting Article with uniques key Numero");
        return articleService.getByNumero(numero);
    }

    /**
     * @deprecated Use {@link #findArticles(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Article instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Article> searchArticlesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Articles list");
        return articleService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Article instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Article> findArticles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Articles list");
        return articleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Article instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Article> filterArticles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Articles list");
        return articleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportArticles(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return articleService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Article instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countArticles( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Articles");
		return articleService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getArticleAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return articleService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/ligneCommandes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the ligneCommandes instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LigneCommande> findAssociatedLigneCommandes(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated ligneCommandes");
        return articleService.findAssociatedLigneCommandes(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ArticleService instance
	 */
	protected void setArticleService(ArticleService service) {
		this.articleService = service;
	}

}

