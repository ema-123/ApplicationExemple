/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etgdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import ch.etg.application.exemple.etgdb.Commande;
import ch.etg.application.exemple.etgdb.StatutCommande;


/**
 * ServiceImpl object for domain model class StatutCommande.
 *
 * @see StatutCommande
 */
@Service("EtgDb.StatutCommandeService")
@Validated
public class StatutCommandeServiceImpl implements StatutCommandeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(StatutCommandeServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("EtgDb.CommandeService")
	private CommandeService commandeService;

    @Autowired
    @Qualifier("EtgDb.StatutCommandeDao")
    private WMGenericDao<StatutCommande, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<StatutCommande, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "EtgDbTransactionManager")
    @Override
	public StatutCommande create(StatutCommande statutCommande) {
        LOGGER.debug("Creating a new StatutCommande with information: {}", statutCommande);

        StatutCommande statutCommandeCreated = this.wmGenericDao.create(statutCommande);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(statutCommandeCreated);
    }

	@Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
	public StatutCommande getById(Integer statutcommandeId) throws EntityNotFoundException {
        LOGGER.debug("Finding StatutCommande by id: {}", statutcommandeId);
        return this.wmGenericDao.findById(statutcommandeId);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
	public StatutCommande findById(Integer statutcommandeId) {
        LOGGER.debug("Finding StatutCommande by id: {}", statutcommandeId);
        try {
            return this.wmGenericDao.findById(statutcommandeId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No StatutCommande found with id: {}", statutcommandeId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "EtgDbTransactionManager")
	@Override
	public StatutCommande update(StatutCommande statutCommande) throws EntityNotFoundException {
        LOGGER.debug("Updating StatutCommande with information: {}", statutCommande);

        List<Commande> commandes = statutCommande.getCommandes();

        if(commandes != null && Hibernate.isInitialized(commandes)) {
            if(!commandes.isEmpty()) {
                for(Commande _commande : commandes) {
                    _commande.setStatutCommande(statutCommande);
                }
            }
        }

        this.wmGenericDao.update(statutCommande);
        this.wmGenericDao.refresh(statutCommande);

        // Deleting children which are not present in the list.
        if(commandes != null && Hibernate.isInitialized(commandes) && !commandes.isEmpty()) {
            List<Commande> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, Commande.class,
                        new DaoUtils.ChildrenFilter("statutCommande", statutCommande, commandes)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            for(Commande _commande : _remainingChildren) {
                commandeService.delete(_commande);
            }
            statutCommande.setCommandes(commandes);
        }

        return statutCommande;
    }

    @Transactional(value = "EtgDbTransactionManager")
	@Override
	public StatutCommande delete(Integer statutcommandeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting StatutCommande with id: {}", statutcommandeId);
        StatutCommande deleted = this.wmGenericDao.findById(statutcommandeId);
        if (deleted == null) {
            LOGGER.debug("No StatutCommande found with id: {}", statutcommandeId);
            throw new EntityNotFoundException(String.valueOf(statutcommandeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "EtgDbTransactionManager")
	@Override
	public void delete(StatutCommande statutCommande) {
        LOGGER.debug("Deleting StatutCommande with {}", statutCommande);
        this.wmGenericDao.delete(statutCommande);
    }

	@Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
	public Page<StatutCommande> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all StatutCommandes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
    @Override
    public Page<StatutCommande> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all StatutCommandes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service EtgDb for table StatutCommande to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
    @Override
    public Page<Commande> findAssociatedCommandes(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated commandes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("statutCommande.id = '" + id + "'");

        return commandeService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CommandeService instance
	 */
	protected void setCommandeService(CommandeService service) {
        this.commandeService = service;
    }

}

