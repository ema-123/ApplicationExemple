/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etgdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import ch.etg.application.exemple.etgdb.Commande;
import ch.etg.application.exemple.etgdb.StatutCommande;

/**
 * Service object for domain model class {@link StatutCommande}.
 */
public interface StatutCommandeService {

    /**
     * Creates a new StatutCommande. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on StatutCommande if any.
     *
     * @param statutCommande Details of the StatutCommande to be created; value cannot be null.
     * @return The newly created StatutCommande.
     */
	StatutCommande create(@Valid StatutCommande statutCommande);


	/**
	 * Returns StatutCommande by given id if exists.
	 *
	 * @param statutcommandeId The id of the StatutCommande to get; value cannot be null.
	 * @return StatutCommande associated with the given statutcommandeId.
     * @throws EntityNotFoundException If no StatutCommande is found.
	 */
	StatutCommande getById(Integer statutcommandeId) throws EntityNotFoundException;

    /**
	 * Find and return the StatutCommande by given id if exists, returns null otherwise.
	 *
	 * @param statutcommandeId The id of the StatutCommande to get; value cannot be null.
	 * @return StatutCommande associated with the given statutcommandeId.
	 */
	StatutCommande findById(Integer statutcommandeId);


	/**
	 * Updates the details of an existing StatutCommande. It replaces all fields of the existing StatutCommande with the given statutCommande.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on StatutCommande if any.
     *
	 * @param statutCommande The details of the StatutCommande to be updated; value cannot be null.
	 * @return The updated StatutCommande.
	 * @throws EntityNotFoundException if no StatutCommande is found with given input.
	 */
	StatutCommande update(@Valid StatutCommande statutCommande) throws EntityNotFoundException;

    /**
	 * Deletes an existing StatutCommande with the given id.
	 *
	 * @param statutcommandeId The id of the StatutCommande to be deleted; value cannot be null.
	 * @return The deleted StatutCommande.
	 * @throws EntityNotFoundException if no StatutCommande found with the given id.
	 */
	StatutCommande delete(Integer statutcommandeId) throws EntityNotFoundException;

    /**
	 * Deletes an existing StatutCommande with the given object.
	 *
	 * @param statutCommande The instance of the StatutCommande to be deleted; value cannot be null.
	 */
	void delete(StatutCommande statutCommande);

	/**
	 * Find all StatutCommandes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching StatutCommandes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<StatutCommande> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all StatutCommandes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching StatutCommandes.
     *
     * @see Pageable
     * @see Page
	 */
    Page<StatutCommande> findAll(String query, Pageable pageable);

    /**
	 * Exports all StatutCommandes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the StatutCommandes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the StatutCommande.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated commandes for given StatutCommande id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Commande instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Commande> findAssociatedCommandes(Integer id, Pageable pageable);

}

