/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etgdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import ch.etg.application.exemple.etgdb.Article;
import ch.etg.application.exemple.etgdb.LigneCommande;

/**
 * Service object for domain model class {@link Article}.
 */
public interface ArticleService {

    /**
     * Creates a new Article. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Article if any.
     *
     * @param article Details of the Article to be created; value cannot be null.
     * @return The newly created Article.
     */
	Article create(@Valid Article article);


	/**
	 * Returns Article by given id if exists.
	 *
	 * @param articleId The id of the Article to get; value cannot be null.
	 * @return Article associated with the given articleId.
     * @throws EntityNotFoundException If no Article is found.
	 */
	Article getById(Integer articleId) throws EntityNotFoundException;

    /**
	 * Find and return the Article by given id if exists, returns null otherwise.
	 *
	 * @param articleId The id of the Article to get; value cannot be null.
	 * @return Article associated with the given articleId.
	 */
	Article findById(Integer articleId);

    /**
	 * Find and return the Article for given numero  if exists.
	 *
	 * @param numero value of numero; value cannot be null.
	 * @return Article associated with the given inputs.
     * @throws EntityNotFoundException if no matching Article found.
	 */
    Article getByNumero(int numero)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing Article. It replaces all fields of the existing Article with the given article.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Article if any.
     *
	 * @param article The details of the Article to be updated; value cannot be null.
	 * @return The updated Article.
	 * @throws EntityNotFoundException if no Article is found with given input.
	 */
	Article update(@Valid Article article) throws EntityNotFoundException;

    /**
	 * Deletes an existing Article with the given id.
	 *
	 * @param articleId The id of the Article to be deleted; value cannot be null.
	 * @return The deleted Article.
	 * @throws EntityNotFoundException if no Article found with the given id.
	 */
	Article delete(Integer articleId) throws EntityNotFoundException;

    /**
	 * Deletes an existing Article with the given object.
	 *
	 * @param article The instance of the Article to be deleted; value cannot be null.
	 */
	void delete(Article article);

	/**
	 * Find all Articles matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Articles.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Article> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Articles matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Articles.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Article> findAll(String query, Pageable pageable);

    /**
	 * Exports all Articles matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Articles in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Article.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated ligneCommandes for given Article id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated LigneCommande instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<LigneCommande> findAssociatedLigneCommandes(Integer id, Pageable pageable);

}

