/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etgdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import ch.etg.application.exemple.etgdb.Article;
import ch.etg.application.exemple.etgdb.LigneCommande;


/**
 * ServiceImpl object for domain model class Article.
 *
 * @see Article
 */
@Service("EtgDb.ArticleService")
@Validated
public class ArticleServiceImpl implements ArticleService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ArticleServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("EtgDb.LigneCommandeService")
	private LigneCommandeService ligneCommandeService;

    @Autowired
    @Qualifier("EtgDb.ArticleDao")
    private WMGenericDao<Article, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Article, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "EtgDbTransactionManager")
    @Override
	public Article create(Article article) {
        LOGGER.debug("Creating a new Article with information: {}", article);

        Article articleCreated = this.wmGenericDao.create(article);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(articleCreated);
    }

	@Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
	public Article getById(Integer articleId) throws EntityNotFoundException {
        LOGGER.debug("Finding Article by id: {}", articleId);
        return this.wmGenericDao.findById(articleId);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
	public Article findById(Integer articleId) {
        LOGGER.debug("Finding Article by id: {}", articleId);
        try {
            return this.wmGenericDao.findById(articleId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No Article found with id: {}", articleId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
    @Override
    public Article getByNumero(int numero) {
        Map<String, Object> numeroMap = new HashMap<>();
        numeroMap.put("numero", numero);

        LOGGER.debug("Finding Article by unique keys: {}", numeroMap);
        Article article = this.wmGenericDao.findByUniqueKey(numeroMap);

        if (article == null){
            LOGGER.debug("No Article found with given unique key values: {}", numeroMap);
            throw new EntityNotFoundException(String.valueOf(numeroMap));
        }

        return article;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "EtgDbTransactionManager")
	@Override
	public Article update(Article article) throws EntityNotFoundException {
        LOGGER.debug("Updating Article with information: {}", article);

        List<LigneCommande> ligneCommandes = article.getLigneCommandes();

        if(ligneCommandes != null && Hibernate.isInitialized(ligneCommandes)) {
            if(!ligneCommandes.isEmpty()) {
                for(LigneCommande _ligneCommande : ligneCommandes) {
                    _ligneCommande.setArticle(article);
                }
            }
        }

        this.wmGenericDao.update(article);
        this.wmGenericDao.refresh(article);

        // Deleting children which are not present in the list.
        if(ligneCommandes != null && Hibernate.isInitialized(ligneCommandes) && !ligneCommandes.isEmpty()) {
            List<LigneCommande> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, LigneCommande.class,
                        new DaoUtils.ChildrenFilter("article", article, ligneCommandes)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            for(LigneCommande _ligneCommande : _remainingChildren) {
                ligneCommandeService.delete(_ligneCommande);
            }
            article.setLigneCommandes(ligneCommandes);
        }

        return article;
    }

    @Transactional(value = "EtgDbTransactionManager")
	@Override
	public Article delete(Integer articleId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Article with id: {}", articleId);
        Article deleted = this.wmGenericDao.findById(articleId);
        if (deleted == null) {
            LOGGER.debug("No Article found with id: {}", articleId);
            throw new EntityNotFoundException(String.valueOf(articleId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "EtgDbTransactionManager")
	@Override
	public void delete(Article article) {
        LOGGER.debug("Deleting Article with {}", article);
        this.wmGenericDao.delete(article);
    }

	@Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
	public Page<Article> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Articles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
    @Override
    public Page<Article> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Articles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service EtgDb for table Article to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
    @Override
    public Page<LigneCommande> findAssociatedLigneCommandes(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated ligneCommandes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("article.id = '" + id + "'");

        return ligneCommandeService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LigneCommandeService instance
	 */
	protected void setLigneCommandeService(LigneCommandeService service) {
        this.ligneCommandeService = service;
    }

}

