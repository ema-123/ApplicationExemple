/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etgdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import ch.etg.application.exemple.etgdb.LigneCommande;

/**
 * Service object for domain model class {@link LigneCommande}.
 */
public interface LigneCommandeService {

    /**
     * Creates a new LigneCommande. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LigneCommande if any.
     *
     * @param ligneCommande Details of the LigneCommande to be created; value cannot be null.
     * @return The newly created LigneCommande.
     */
	LigneCommande create(@Valid LigneCommande ligneCommande);


	/**
	 * Returns LigneCommande by given id if exists.
	 *
	 * @param lignecommandeId The id of the LigneCommande to get; value cannot be null.
	 * @return LigneCommande associated with the given lignecommandeId.
     * @throws EntityNotFoundException If no LigneCommande is found.
	 */
	LigneCommande getById(Integer lignecommandeId) throws EntityNotFoundException;

    /**
	 * Find and return the LigneCommande by given id if exists, returns null otherwise.
	 *
	 * @param lignecommandeId The id of the LigneCommande to get; value cannot be null.
	 * @return LigneCommande associated with the given lignecommandeId.
	 */
	LigneCommande findById(Integer lignecommandeId);

    /**
	 * Find and return the LigneCommande for given numero  if exists.
	 *
	 * @param numero value of numero; value cannot be null.
	 * @return LigneCommande associated with the given inputs.
     * @throws EntityNotFoundException if no matching LigneCommande found.
	 */
    LigneCommande getByNumero(int numero)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing LigneCommande. It replaces all fields of the existing LigneCommande with the given ligneCommande.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on LigneCommande if any.
     *
	 * @param ligneCommande The details of the LigneCommande to be updated; value cannot be null.
	 * @return The updated LigneCommande.
	 * @throws EntityNotFoundException if no LigneCommande is found with given input.
	 */
	LigneCommande update(@Valid LigneCommande ligneCommande) throws EntityNotFoundException;

    /**
	 * Deletes an existing LigneCommande with the given id.
	 *
	 * @param lignecommandeId The id of the LigneCommande to be deleted; value cannot be null.
	 * @return The deleted LigneCommande.
	 * @throws EntityNotFoundException if no LigneCommande found with the given id.
	 */
	LigneCommande delete(Integer lignecommandeId) throws EntityNotFoundException;

    /**
	 * Deletes an existing LigneCommande with the given object.
	 *
	 * @param ligneCommande The instance of the LigneCommande to be deleted; value cannot be null.
	 */
	void delete(LigneCommande ligneCommande);

	/**
	 * Find all LigneCommandes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching LigneCommandes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<LigneCommande> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all LigneCommandes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching LigneCommandes.
     *
     * @see Pageable
     * @see Page
	 */
    Page<LigneCommande> findAll(String query, Pageable pageable);

    /**
	 * Exports all LigneCommandes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the LigneCommandes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the LigneCommande.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

