/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etgdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import ch.etg.application.exemple.etgdb.Commande;
import ch.etg.application.exemple.etgdb.LigneCommande;
import ch.etg.application.exemple.etgdb.service.CommandeService;


/**
 * Controller object for domain model class Commande.
 * @see Commande
 */
@RestController("EtgDb.CommandeController")
@Api(value = "CommandeController", description = "Exposes APIs to work with Commande resource.")
@RequestMapping("/EtgDb/Commande")
public class CommandeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CommandeController.class);

    @Autowired
	@Qualifier("EtgDb.CommandeService")
	private CommandeService commandeService;

	@ApiOperation(value = "Creates a new Commande instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Commande createCommande(@RequestBody Commande commande) {
		LOGGER.debug("Create Commande with information: {}" , commande);

		commande = commandeService.create(commande);
		LOGGER.debug("Created Commande with information: {}" , commande);

	    return commande;
	}

    @ApiOperation(value = "Returns the Commande instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Commande getCommande(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Commande with id: {}" , id);

        Commande foundCommande = commandeService.getById(id);
        LOGGER.debug("Commande details with id: {}" , foundCommande);

        return foundCommande;
    }

    @ApiOperation(value = "Updates the Commande instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Commande editCommande(@PathVariable("id") Integer id, @RequestBody Commande commande) throws EntityNotFoundException {
        LOGGER.debug("Editing Commande with id: {}" , commande.getId());

        commande.setId(id);
        commande = commandeService.update(commande);
        LOGGER.debug("Commande details with id: {}" , commande);

        return commande;
    }

    @ApiOperation(value = "Deletes the Commande instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCommande(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Commande with id: {}" , id);

        Commande deletedCommande = commandeService.delete(id);

        return deletedCommande != null;
    }

    /**
     * @deprecated Use {@link #findCommandes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Commande instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Commande> searchCommandesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Commandes list");
        return commandeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Commande instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Commande> findCommandes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Commandes list");
        return commandeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Commande instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Commande> filterCommandes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Commandes list");
        return commandeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCommandes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return commandeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Commande instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCommandes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Commandes");
		return commandeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCommandeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return commandeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/ligneCommandes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the ligneCommandes instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LigneCommande> findAssociatedLigneCommandes(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated ligneCommandes");
        return commandeService.findAssociatedLigneCommandes(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CommandeService instance
	 */
	protected void setCommandeService(CommandeService service) {
		this.commandeService = service;
	}

}

