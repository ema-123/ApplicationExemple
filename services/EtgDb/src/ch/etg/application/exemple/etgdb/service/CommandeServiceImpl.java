/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etgdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import ch.etg.application.exemple.etgdb.Commande;
import ch.etg.application.exemple.etgdb.LigneCommande;


/**
 * ServiceImpl object for domain model class Commande.
 *
 * @see Commande
 */
@Service("EtgDb.CommandeService")
@Validated
public class CommandeServiceImpl implements CommandeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CommandeServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("EtgDb.LigneCommandeService")
	private LigneCommandeService ligneCommandeService;

    @Autowired
    @Qualifier("EtgDb.CommandeDao")
    private WMGenericDao<Commande, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Commande, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "EtgDbTransactionManager")
    @Override
	public Commande create(Commande commande) {
        LOGGER.debug("Creating a new Commande with information: {}", commande);

        Commande commandeCreated = this.wmGenericDao.create(commande);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(commandeCreated);
    }

	@Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
	public Commande getById(Integer commandeId) throws EntityNotFoundException {
        LOGGER.debug("Finding Commande by id: {}", commandeId);
        return this.wmGenericDao.findById(commandeId);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
	public Commande findById(Integer commandeId) {
        LOGGER.debug("Finding Commande by id: {}", commandeId);
        try {
            return this.wmGenericDao.findById(commandeId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No Commande found with id: {}", commandeId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "EtgDbTransactionManager")
	@Override
	public Commande update(Commande commande) throws EntityNotFoundException {
        LOGGER.debug("Updating Commande with information: {}", commande);

        List<LigneCommande> ligneCommandes = commande.getLigneCommandes();

        if(ligneCommandes != null && Hibernate.isInitialized(ligneCommandes)) {
            if(!ligneCommandes.isEmpty()) {
                for(LigneCommande _ligneCommande : ligneCommandes) {
                    _ligneCommande.setCommande(commande);
                }
            }
        }

        this.wmGenericDao.update(commande);
        this.wmGenericDao.refresh(commande);

        // Deleting children which are not present in the list.
        if(ligneCommandes != null && Hibernate.isInitialized(ligneCommandes) && !ligneCommandes.isEmpty()) {
            List<LigneCommande> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, LigneCommande.class,
                        new DaoUtils.ChildrenFilter("commande", commande, ligneCommandes)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            for(LigneCommande _ligneCommande : _remainingChildren) {
                ligneCommandeService.delete(_ligneCommande);
            }
            commande.setLigneCommandes(ligneCommandes);
        }

        return commande;
    }

    @Transactional(value = "EtgDbTransactionManager")
	@Override
	public Commande delete(Integer commandeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Commande with id: {}", commandeId);
        Commande deleted = this.wmGenericDao.findById(commandeId);
        if (deleted == null) {
            LOGGER.debug("No Commande found with id: {}", commandeId);
            throw new EntityNotFoundException(String.valueOf(commandeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "EtgDbTransactionManager")
	@Override
	public void delete(Commande commande) {
        LOGGER.debug("Deleting Commande with {}", commande);
        this.wmGenericDao.delete(commande);
    }

	@Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
	public Page<Commande> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Commandes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
    @Override
    public Page<Commande> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Commandes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service EtgDb for table Commande to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "EtgDbTransactionManager")
    @Override
    public Page<LigneCommande> findAssociatedLigneCommandes(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated ligneCommandes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("commande.id = '" + id + "'");

        return ligneCommandeService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LigneCommandeService instance
	 */
	protected void setLigneCommandeService(LigneCommandeService service) {
        this.ligneCommandeService = service;
    }

}

