/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etgdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import ch.etg.application.exemple.etgdb.LigneCommande;
import ch.etg.application.exemple.etgdb.service.LigneCommandeService;


/**
 * Controller object for domain model class LigneCommande.
 * @see LigneCommande
 */
@RestController("EtgDb.LigneCommandeController")
@Api(value = "LigneCommandeController", description = "Exposes APIs to work with LigneCommande resource.")
@RequestMapping("/EtgDb/LigneCommande")
public class LigneCommandeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LigneCommandeController.class);

    @Autowired
	@Qualifier("EtgDb.LigneCommandeService")
	private LigneCommandeService ligneCommandeService;

	@ApiOperation(value = "Creates a new LigneCommande instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LigneCommande createLigneCommande(@RequestBody LigneCommande ligneCommande) {
		LOGGER.debug("Create LigneCommande with information: {}" , ligneCommande);

		ligneCommande = ligneCommandeService.create(ligneCommande);
		LOGGER.debug("Created LigneCommande with information: {}" , ligneCommande);

	    return ligneCommande;
	}

    @ApiOperation(value = "Returns the LigneCommande instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LigneCommande getLigneCommande(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting LigneCommande with id: {}" , id);

        LigneCommande foundLigneCommande = ligneCommandeService.getById(id);
        LOGGER.debug("LigneCommande details with id: {}" , foundLigneCommande);

        return foundLigneCommande;
    }

    @ApiOperation(value = "Updates the LigneCommande instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LigneCommande editLigneCommande(@PathVariable("id") Integer id, @RequestBody LigneCommande ligneCommande) throws EntityNotFoundException {
        LOGGER.debug("Editing LigneCommande with id: {}" , ligneCommande.getId());

        ligneCommande.setId(id);
        ligneCommande = ligneCommandeService.update(ligneCommande);
        LOGGER.debug("LigneCommande details with id: {}" , ligneCommande);

        return ligneCommande;
    }

    @ApiOperation(value = "Deletes the LigneCommande instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLigneCommande(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting LigneCommande with id: {}" , id);

        LigneCommande deletedLigneCommande = ligneCommandeService.delete(id);

        return deletedLigneCommande != null;
    }

    /**
     * @deprecated Use {@link #findLigneCommandes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LigneCommande instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LigneCommande> searchLigneCommandesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LigneCommandes list");
        return ligneCommandeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LigneCommande instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LigneCommande> findLigneCommandes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LigneCommandes list");
        return ligneCommandeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LigneCommande instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LigneCommande> filterLigneCommandes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LigneCommandes list");
        return ligneCommandeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLigneCommandes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return ligneCommandeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of LigneCommande instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLigneCommandes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LigneCommandes");
		return ligneCommandeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLigneCommandeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return ligneCommandeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LigneCommandeService instance
	 */
	protected void setLigneCommandeService(LigneCommandeService service) {
		this.ligneCommandeService = service;
	}

}

