/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etg.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import ch.etg.application.exemple.etg.EtgLigneCommande;
import ch.etg.application.exemple.etg.EtgLigneCommandeId;
import ch.etg.application.exemple.etg.service.EtgLigneCommandeService;


/**
 * Controller object for domain model class EtgLigneCommande.
 * @see EtgLigneCommande
 */
@RestController("etg.EtgLigneCommandeController")
@Api(value = "EtgLigneCommandeController", description = "Exposes APIs to work with EtgLigneCommande resource.")
@RequestMapping("/etg/EtgLigneCommande")
public class EtgLigneCommandeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EtgLigneCommandeController.class);

    @Autowired
	@Qualifier("etg.EtgLigneCommandeService")
	private EtgLigneCommandeService etgLigneCommandeService;

	@ApiOperation(value = "Creates a new EtgLigneCommande instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EtgLigneCommande createEtgLigneCommande(@RequestBody EtgLigneCommande etgLigneCommande) {
		LOGGER.debug("Create EtgLigneCommande with information: {}" , etgLigneCommande);

		etgLigneCommande = etgLigneCommandeService.create(etgLigneCommande);
		LOGGER.debug("Created EtgLigneCommande with information: {}" , etgLigneCommande);

	    return etgLigneCommande;
	}

@ApiOperation(value = "Returns the EtgLigneCommande instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EtgLigneCommande getEtgLigneCommande(@RequestParam("id") Integer id,@RequestParam("numero") Integer numero,@RequestParam("commandeId") Integer commandeId,@RequestParam("articleId") Integer articleId,@RequestParam("nombreArticle") Integer nombreArticle,@RequestParam("totalArticle") BigDecimal totalArticle,@RequestParam("prixArticle") BigDecimal prixArticle) throws EntityNotFoundException {

        EtgLigneCommandeId etglignecommandeId = new EtgLigneCommandeId();
        etglignecommandeId.setId(id);
        etglignecommandeId.setNumero(numero);
        etglignecommandeId.setCommandeId(commandeId);
        etglignecommandeId.setArticleId(articleId);
        etglignecommandeId.setNombreArticle(nombreArticle);
        etglignecommandeId.setTotalArticle(totalArticle);
        etglignecommandeId.setPrixArticle(prixArticle);

        LOGGER.debug("Getting EtgLigneCommande with id: {}" , etglignecommandeId);
        EtgLigneCommande etgLigneCommande = etgLigneCommandeService.getById(etglignecommandeId);
        LOGGER.debug("EtgLigneCommande details with id: {}" , etgLigneCommande);

        return etgLigneCommande;
    }



    @ApiOperation(value = "Updates the EtgLigneCommande instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EtgLigneCommande editEtgLigneCommande(@RequestParam("id") Integer id,@RequestParam("numero") Integer numero,@RequestParam("commandeId") Integer commandeId,@RequestParam("articleId") Integer articleId,@RequestParam("nombreArticle") Integer nombreArticle,@RequestParam("totalArticle") BigDecimal totalArticle,@RequestParam("prixArticle") BigDecimal prixArticle, @RequestBody EtgLigneCommande etgLigneCommande) throws EntityNotFoundException {

        etgLigneCommande.setId(id);
        etgLigneCommande.setNumero(numero);
        etgLigneCommande.setCommandeId(commandeId);
        etgLigneCommande.setArticleId(articleId);
        etgLigneCommande.setNombreArticle(nombreArticle);
        etgLigneCommande.setTotalArticle(totalArticle);
        etgLigneCommande.setPrixArticle(prixArticle);

        LOGGER.debug("EtgLigneCommande details with id is updated with: {}" , etgLigneCommande);

        return etgLigneCommandeService.update(etgLigneCommande);
    }


    @ApiOperation(value = "Deletes the EtgLigneCommande instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEtgLigneCommande(@RequestParam("id") Integer id,@RequestParam("numero") Integer numero,@RequestParam("commandeId") Integer commandeId,@RequestParam("articleId") Integer articleId,@RequestParam("nombreArticle") Integer nombreArticle,@RequestParam("totalArticle") BigDecimal totalArticle,@RequestParam("prixArticle") BigDecimal prixArticle) throws EntityNotFoundException {

        EtgLigneCommandeId etglignecommandeId = new EtgLigneCommandeId();
        etglignecommandeId.setId(id);
        etglignecommandeId.setNumero(numero);
        etglignecommandeId.setCommandeId(commandeId);
        etglignecommandeId.setArticleId(articleId);
        etglignecommandeId.setNombreArticle(nombreArticle);
        etglignecommandeId.setTotalArticle(totalArticle);
        etglignecommandeId.setPrixArticle(prixArticle);

        LOGGER.debug("Deleting EtgLigneCommande with id: {}" , etglignecommandeId);
        EtgLigneCommande etgLigneCommande = etgLigneCommandeService.delete(etglignecommandeId);

        return etgLigneCommande != null;
    }


    @RequestMapping(value = "/id/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching EtgLigneCommande with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EtgLigneCommande getByUniqueKeyId(@PathVariable("id") int id) {
        LOGGER.debug("Getting EtgLigneCommande with uniques key UniqueKeyId");
        return etgLigneCommandeService.getByUniqueKeyId(id);
    }

    /**
     * @deprecated Use {@link #findEtgLigneCommandes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EtgLigneCommande instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EtgLigneCommande> searchEtgLigneCommandesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EtgLigneCommandes list");
        return etgLigneCommandeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EtgLigneCommande instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EtgLigneCommande> findEtgLigneCommandes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EtgLigneCommandes list");
        return etgLigneCommandeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EtgLigneCommande instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EtgLigneCommande> filterEtgLigneCommandes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EtgLigneCommandes list");
        return etgLigneCommandeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEtgLigneCommandes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return etgLigneCommandeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of EtgLigneCommande instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEtgLigneCommandes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EtgLigneCommandes");
		return etgLigneCommandeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEtgLigneCommandeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return etgLigneCommandeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EtgLigneCommandeService instance
	 */
	protected void setEtgLigneCommandeService(EtgLigneCommandeService service) {
		this.etgLigneCommandeService = service;
	}

}

