/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etg.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import ch.etg.application.exemple.etg.EtgArticle;
import ch.etg.application.exemple.etg.EtgArticleId;
import ch.etg.application.exemple.etg.EtgLigneCommande;


/**
 * ServiceImpl object for domain model class EtgArticle.
 *
 * @see EtgArticle
 */
@Service("etg.EtgArticleService")
@Validated
public class EtgArticleServiceImpl implements EtgArticleService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EtgArticleServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("etg.EtgLigneCommandeService")
	private EtgLigneCommandeService etgLigneCommandeService;

    @Autowired
    @Qualifier("etg.EtgArticleDao")
    private WMGenericDao<EtgArticle, EtgArticleId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EtgArticle, EtgArticleId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "etgTransactionManager")
    @Override
	public EtgArticle create(EtgArticle etgArticle) {
        LOGGER.debug("Creating a new EtgArticle with information: {}", etgArticle);

        List<EtgLigneCommande> etgLigneCommandes = etgArticle.getEtgLigneCommandes();

        if(etgLigneCommandes != null && Hibernate.isInitialized(etgLigneCommandes)) {
            if(!etgLigneCommandes.isEmpty()) {
                for(EtgLigneCommande _etgLigneCommande : etgLigneCommandes) {
                    _etgLigneCommande.setEtgArticle(etgArticle);
                }
            }
        }

        EtgArticle etgArticleCreated = this.wmGenericDao.create(etgArticle);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(etgArticleCreated);
    }

	@Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
	public EtgArticle getById(EtgArticleId etgarticleId) throws EntityNotFoundException {
        LOGGER.debug("Finding EtgArticle by id: {}", etgarticleId);
        return this.wmGenericDao.findById(etgarticleId);
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
	public EtgArticle findById(EtgArticleId etgarticleId) {
        LOGGER.debug("Finding EtgArticle by id: {}", etgarticleId);
        try {
            return this.wmGenericDao.findById(etgarticleId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No EtgArticle found with id: {}", etgarticleId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
    @Override
    public EtgArticle getByNumero(int numero) {
        Map<String, Object> numeroMap = new HashMap<>();
        numeroMap.put("numero", numero);

        LOGGER.debug("Finding EtgArticle by unique keys: {}", numeroMap);
        EtgArticle etgArticle = this.wmGenericDao.findByUniqueKey(numeroMap);

        if (etgArticle == null){
            LOGGER.debug("No EtgArticle found with given unique key values: {}", numeroMap);
            throw new EntityNotFoundException(String.valueOf(numeroMap));
        }

        return etgArticle;
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
    @Override
    public EtgArticle getByUniqueKeyId(int id) {
        Map<String, Object> uniqueKeyIdMap = new HashMap<>();
        uniqueKeyIdMap.put("id", id);

        LOGGER.debug("Finding EtgArticle by unique keys: {}", uniqueKeyIdMap);
        EtgArticle etgArticle = this.wmGenericDao.findByUniqueKey(uniqueKeyIdMap);

        if (etgArticle == null){
            LOGGER.debug("No EtgArticle found with given unique key values: {}", uniqueKeyIdMap);
            throw new EntityNotFoundException(String.valueOf(uniqueKeyIdMap));
        }

        return etgArticle;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "etgTransactionManager")
	@Override
	public EtgArticle update(EtgArticle etgArticle) throws EntityNotFoundException {
        LOGGER.debug("Updating EtgArticle with information: {}", etgArticle);

        List<EtgLigneCommande> etgLigneCommandes = etgArticle.getEtgLigneCommandes();

        if(etgLigneCommandes != null && Hibernate.isInitialized(etgLigneCommandes)) {
            if(!etgLigneCommandes.isEmpty()) {
                for(EtgLigneCommande _etgLigneCommande : etgLigneCommandes) {
                    _etgLigneCommande.setEtgArticle(etgArticle);
                }
            }
        }

        this.wmGenericDao.update(etgArticle);
        this.wmGenericDao.refresh(etgArticle);

        // Deleting children which are not present in the list.
        if(etgLigneCommandes != null && Hibernate.isInitialized(etgLigneCommandes) && !etgLigneCommandes.isEmpty()) {
            List<EtgLigneCommande> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, EtgLigneCommande.class,
                        new DaoUtils.ChildrenFilter("etgArticle", etgArticle, etgLigneCommandes)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            for(EtgLigneCommande _etgLigneCommande : _remainingChildren) {
                etgLigneCommandeService.delete(_etgLigneCommande);
            }
            etgArticle.setEtgLigneCommandes(etgLigneCommandes);
        }

        return etgArticle;
    }

    @Transactional(value = "etgTransactionManager")
	@Override
	public EtgArticle delete(EtgArticleId etgarticleId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EtgArticle with id: {}", etgarticleId);
        EtgArticle deleted = this.wmGenericDao.findById(etgarticleId);
        if (deleted == null) {
            LOGGER.debug("No EtgArticle found with id: {}", etgarticleId);
            throw new EntityNotFoundException(String.valueOf(etgarticleId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "etgTransactionManager")
	@Override
	public void delete(EtgArticle etgArticle) {
        LOGGER.debug("Deleting EtgArticle with {}", etgArticle);
        this.wmGenericDao.delete(etgArticle);
    }

	@Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
	public Page<EtgArticle> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EtgArticles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
    @Override
    public Page<EtgArticle> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EtgArticles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service etg for table EtgArticle to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
    @Override
    public Page<EtgLigneCommande> findAssociatedEtgLigneCommandes(Integer id, Integer numero, String libelle, BigDecimal prix, Pageable pageable) {
        LOGGER.debug("Fetching all associated etgLigneCommandes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("etgArticle.id = '" + id + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("etgArticle.numero = '" + numero + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("etgArticle.libelle = '" + libelle + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("etgArticle.prix = '" + prix + "'");

        return etgLigneCommandeService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EtgLigneCommandeService instance
	 */
	protected void setEtgLigneCommandeService(EtgLigneCommandeService service) {
        this.etgLigneCommandeService = service;
    }

}

