/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etg.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import ch.etg.application.exemple.etg.EtgLigneCommande;
import ch.etg.application.exemple.etg.EtgLigneCommandeId;


/**
 * ServiceImpl object for domain model class EtgLigneCommande.
 *
 * @see EtgLigneCommande
 */
@Service("etg.EtgLigneCommandeService")
@Validated
public class EtgLigneCommandeServiceImpl implements EtgLigneCommandeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EtgLigneCommandeServiceImpl.class);


    @Autowired
    @Qualifier("etg.EtgLigneCommandeDao")
    private WMGenericDao<EtgLigneCommande, EtgLigneCommandeId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EtgLigneCommande, EtgLigneCommandeId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "etgTransactionManager")
    @Override
	public EtgLigneCommande create(EtgLigneCommande etgLigneCommande) {
        LOGGER.debug("Creating a new EtgLigneCommande with information: {}", etgLigneCommande);

        EtgLigneCommande etgLigneCommandeCreated = this.wmGenericDao.create(etgLigneCommande);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(etgLigneCommandeCreated);
    }

	@Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
	public EtgLigneCommande getById(EtgLigneCommandeId etglignecommandeId) throws EntityNotFoundException {
        LOGGER.debug("Finding EtgLigneCommande by id: {}", etglignecommandeId);
        return this.wmGenericDao.findById(etglignecommandeId);
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
	public EtgLigneCommande findById(EtgLigneCommandeId etglignecommandeId) {
        LOGGER.debug("Finding EtgLigneCommande by id: {}", etglignecommandeId);
        try {
            return this.wmGenericDao.findById(etglignecommandeId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No EtgLigneCommande found with id: {}", etglignecommandeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
    @Override
    public EtgLigneCommande getByUniqueKeyId(int id) {
        Map<String, Object> uniqueKeyIdMap = new HashMap<>();
        uniqueKeyIdMap.put("id", id);

        LOGGER.debug("Finding EtgLigneCommande by unique keys: {}", uniqueKeyIdMap);
        EtgLigneCommande etgLigneCommande = this.wmGenericDao.findByUniqueKey(uniqueKeyIdMap);

        if (etgLigneCommande == null){
            LOGGER.debug("No EtgLigneCommande found with given unique key values: {}", uniqueKeyIdMap);
            throw new EntityNotFoundException(String.valueOf(uniqueKeyIdMap));
        }

        return etgLigneCommande;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "etgTransactionManager")
	@Override
	public EtgLigneCommande update(EtgLigneCommande etgLigneCommande) throws EntityNotFoundException {
        LOGGER.debug("Updating EtgLigneCommande with information: {}", etgLigneCommande);

        this.wmGenericDao.update(etgLigneCommande);
        this.wmGenericDao.refresh(etgLigneCommande);

        return etgLigneCommande;
    }

    @Transactional(value = "etgTransactionManager")
	@Override
	public EtgLigneCommande delete(EtgLigneCommandeId etglignecommandeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EtgLigneCommande with id: {}", etglignecommandeId);
        EtgLigneCommande deleted = this.wmGenericDao.findById(etglignecommandeId);
        if (deleted == null) {
            LOGGER.debug("No EtgLigneCommande found with id: {}", etglignecommandeId);
            throw new EntityNotFoundException(String.valueOf(etglignecommandeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "etgTransactionManager")
	@Override
	public void delete(EtgLigneCommande etgLigneCommande) {
        LOGGER.debug("Deleting EtgLigneCommande with {}", etgLigneCommande);
        this.wmGenericDao.delete(etgLigneCommande);
    }

	@Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
	public Page<EtgLigneCommande> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EtgLigneCommandes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
    @Override
    public Page<EtgLigneCommande> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EtgLigneCommandes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service etg for table EtgLigneCommande to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

