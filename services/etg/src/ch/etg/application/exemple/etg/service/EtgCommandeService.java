/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etg.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.sql.Date;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import ch.etg.application.exemple.etg.EtgCommande;
import ch.etg.application.exemple.etg.EtgCommandeId;
import ch.etg.application.exemple.etg.EtgLigneCommande;

/**
 * Service object for domain model class {@link EtgCommande}.
 */
public interface EtgCommandeService {

    /**
     * Creates a new EtgCommande. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EtgCommande if any.
     *
     * @param etgCommande Details of the EtgCommande to be created; value cannot be null.
     * @return The newly created EtgCommande.
     */
	EtgCommande create(@Valid EtgCommande etgCommande);


	/**
	 * Returns EtgCommande by given id if exists.
	 *
	 * @param etgcommandeId The id of the EtgCommande to get; value cannot be null.
	 * @return EtgCommande associated with the given etgcommandeId.
     * @throws EntityNotFoundException If no EtgCommande is found.
	 */
	EtgCommande getById(EtgCommandeId etgcommandeId) throws EntityNotFoundException;

    /**
	 * Find and return the EtgCommande by given id if exists, returns null otherwise.
	 *
	 * @param etgcommandeId The id of the EtgCommande to get; value cannot be null.
	 * @return EtgCommande associated with the given etgcommandeId.
	 */
	EtgCommande findById(EtgCommandeId etgcommandeId);

    /**
	 * Find and return the EtgCommande for given numero  if exists.
	 *
	 * @param numero value of numero; value cannot be null.
	 * @return EtgCommande associated with the given inputs.
     * @throws EntityNotFoundException if no matching EtgCommande found.
	 */
    EtgCommande getByNumero(int numero)throws EntityNotFoundException;

    /**
	 * Find and return the EtgCommande for given id  if exists.
	 *
	 * @param id value of id; value cannot be null.
	 * @return EtgCommande associated with the given inputs.
     * @throws EntityNotFoundException if no matching EtgCommande found.
	 */
    EtgCommande getByUniqueKeyId(int id)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing EtgCommande. It replaces all fields of the existing EtgCommande with the given etgCommande.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on EtgCommande if any.
     *
	 * @param etgCommande The details of the EtgCommande to be updated; value cannot be null.
	 * @return The updated EtgCommande.
	 * @throws EntityNotFoundException if no EtgCommande is found with given input.
	 */
	EtgCommande update(@Valid EtgCommande etgCommande) throws EntityNotFoundException;

    /**
	 * Deletes an existing EtgCommande with the given id.
	 *
	 * @param etgcommandeId The id of the EtgCommande to be deleted; value cannot be null.
	 * @return The deleted EtgCommande.
	 * @throws EntityNotFoundException if no EtgCommande found with the given id.
	 */
	EtgCommande delete(EtgCommandeId etgcommandeId) throws EntityNotFoundException;

    /**
	 * Deletes an existing EtgCommande with the given object.
	 *
	 * @param etgCommande The instance of the EtgCommande to be deleted; value cannot be null.
	 */
	void delete(EtgCommande etgCommande);

	/**
	 * Find all EtgCommandes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EtgCommandes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<EtgCommande> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all EtgCommandes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EtgCommandes.
     *
     * @see Pageable
     * @see Page
	 */
    Page<EtgCommande> findAll(String query, Pageable pageable);

    /**
	 * Exports all EtgCommandes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EtgCommandes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the EtgCommande.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated etgLigneCommandes for given EtgCommande id.
     *
     * @param id value of id; value cannot be null
     * @param numero value of numero; value cannot be null
     * @param client value of client; value cannot be null
     * @param dateCommande value of dateCommande; value cannot be null
     * @param statut value of statut; value cannot be null
     * @param total value of total; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated EtgLigneCommande instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<EtgLigneCommande> findAssociatedEtgLigneCommandes(Integer id, Integer numero, String client, Date dateCommande, Boolean statut, BigDecimal total, Pageable pageable);

}

