/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etg.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import ch.etg.application.exemple.etg.EtgArticle;

/**
 * Service object for domain model class {@link EtgArticle}.
 */
public interface EtgArticleService {

    /**
     * Creates a new EtgArticle. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EtgArticle if any.
     *
     * @param etgArticle Details of the EtgArticle to be created; value cannot be null.
     * @return The newly created EtgArticle.
     */
	EtgArticle create(@Valid EtgArticle etgArticle);


	/**
	 * Returns EtgArticle by given id if exists.
	 *
	 * @param etgarticleId The id of the EtgArticle to get; value cannot be null.
	 * @return EtgArticle associated with the given etgarticleId.
     * @throws EntityNotFoundException If no EtgArticle is found.
	 */
	EtgArticle getById(Integer etgarticleId) throws EntityNotFoundException;

    /**
	 * Find and return the EtgArticle by given id if exists, returns null otherwise.
	 *
	 * @param etgarticleId The id of the EtgArticle to get; value cannot be null.
	 * @return EtgArticle associated with the given etgarticleId.
	 */
	EtgArticle findById(Integer etgarticleId);

    /**
	 * Find and return the EtgArticle for given numero  if exists.
	 *
	 * @param numero value of numero; value cannot be null.
	 * @return EtgArticle associated with the given inputs.
     * @throws EntityNotFoundException if no matching EtgArticle found.
	 */
    EtgArticle getByNumero(Integer numero)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing EtgArticle. It replaces all fields of the existing EtgArticle with the given etgArticle.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on EtgArticle if any.
     *
	 * @param etgArticle The details of the EtgArticle to be updated; value cannot be null.
	 * @return The updated EtgArticle.
	 * @throws EntityNotFoundException if no EtgArticle is found with given input.
	 */
	EtgArticle update(@Valid EtgArticle etgArticle) throws EntityNotFoundException;

    /**
	 * Deletes an existing EtgArticle with the given id.
	 *
	 * @param etgarticleId The id of the EtgArticle to be deleted; value cannot be null.
	 * @return The deleted EtgArticle.
	 * @throws EntityNotFoundException if no EtgArticle found with the given id.
	 */
	EtgArticle delete(Integer etgarticleId) throws EntityNotFoundException;

    /**
	 * Deletes an existing EtgArticle with the given object.
	 *
	 * @param etgArticle The instance of the EtgArticle to be deleted; value cannot be null.
	 */
	void delete(EtgArticle etgArticle);

	/**
	 * Find all EtgArticles matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EtgArticles.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<EtgArticle> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all EtgArticles matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EtgArticles.
     *
     * @see Pageable
     * @see Page
	 */
    Page<EtgArticle> findAll(String query, Pageable pageable);

    /**
	 * Exports all EtgArticles matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EtgArticles in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the EtgArticle.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

