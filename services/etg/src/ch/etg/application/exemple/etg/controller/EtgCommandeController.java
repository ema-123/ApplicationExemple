/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etg.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;
import java.sql.Date;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import ch.etg.application.exemple.etg.EtgCommande;
import ch.etg.application.exemple.etg.EtgCommandeId;
import ch.etg.application.exemple.etg.EtgLigneCommande;
import ch.etg.application.exemple.etg.service.EtgCommandeService;


/**
 * Controller object for domain model class EtgCommande.
 * @see EtgCommande
 */
@RestController("etg.EtgCommandeController")
@Api(value = "EtgCommandeController", description = "Exposes APIs to work with EtgCommande resource.")
@RequestMapping("/etg/EtgCommande")
public class EtgCommandeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EtgCommandeController.class);

    @Autowired
	@Qualifier("etg.EtgCommandeService")
	private EtgCommandeService etgCommandeService;

	@ApiOperation(value = "Creates a new EtgCommande instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EtgCommande createEtgCommande(@RequestBody EtgCommande etgCommande) {
		LOGGER.debug("Create EtgCommande with information: {}" , etgCommande);

		etgCommande = etgCommandeService.create(etgCommande);
		LOGGER.debug("Created EtgCommande with information: {}" , etgCommande);

	    return etgCommande;
	}

@ApiOperation(value = "Returns the EtgCommande instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EtgCommande getEtgCommande(@RequestParam("id") Integer id,@RequestParam("numero") Integer numero,@RequestParam("client") String client,@RequestParam("dateCommande") Date dateCommande,@RequestParam("statut") Boolean statut,@RequestParam("total") BigDecimal total) throws EntityNotFoundException {

        EtgCommandeId etgcommandeId = new EtgCommandeId();
        etgcommandeId.setId(id);
        etgcommandeId.setNumero(numero);
        etgcommandeId.setClient(client);
        etgcommandeId.setDateCommande(dateCommande);
        etgcommandeId.setStatut(statut);
        etgcommandeId.setTotal(total);

        LOGGER.debug("Getting EtgCommande with id: {}" , etgcommandeId);
        EtgCommande etgCommande = etgCommandeService.getById(etgcommandeId);
        LOGGER.debug("EtgCommande details with id: {}" , etgCommande);

        return etgCommande;
    }



    @ApiOperation(value = "Updates the EtgCommande instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EtgCommande editEtgCommande(@RequestParam("id") Integer id,@RequestParam("numero") Integer numero,@RequestParam("client") String client,@RequestParam("dateCommande") Date dateCommande,@RequestParam("statut") Boolean statut,@RequestParam("total") BigDecimal total, @RequestBody EtgCommande etgCommande) throws EntityNotFoundException {

        etgCommande.setId(id);
        etgCommande.setNumero(numero);
        etgCommande.setClient(client);
        etgCommande.setDateCommande(dateCommande);
        etgCommande.setStatut(statut);
        etgCommande.setTotal(total);

        LOGGER.debug("EtgCommande details with id is updated with: {}" , etgCommande);

        return etgCommandeService.update(etgCommande);
    }


    @ApiOperation(value = "Deletes the EtgCommande instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEtgCommande(@RequestParam("id") Integer id,@RequestParam("numero") Integer numero,@RequestParam("client") String client,@RequestParam("dateCommande") Date dateCommande,@RequestParam("statut") Boolean statut,@RequestParam("total") BigDecimal total) throws EntityNotFoundException {

        EtgCommandeId etgcommandeId = new EtgCommandeId();
        etgcommandeId.setId(id);
        etgcommandeId.setNumero(numero);
        etgcommandeId.setClient(client);
        etgcommandeId.setDateCommande(dateCommande);
        etgcommandeId.setStatut(statut);
        etgcommandeId.setTotal(total);

        LOGGER.debug("Deleting EtgCommande with id: {}" , etgcommandeId);
        EtgCommande etgCommande = etgCommandeService.delete(etgcommandeId);

        return etgCommande != null;
    }


    @RequestMapping(value = "/numero/{numero}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching EtgCommande with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EtgCommande getByNumero(@PathVariable("numero") int numero) {
        LOGGER.debug("Getting EtgCommande with uniques key Numero");
        return etgCommandeService.getByNumero(numero);
    }

    @RequestMapping(value = "/id/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching EtgCommande with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EtgCommande getByUniqueKeyId(@PathVariable("id") int id) {
        LOGGER.debug("Getting EtgCommande with uniques key UniqueKeyId");
        return etgCommandeService.getByUniqueKeyId(id);
    }

    /**
     * @deprecated Use {@link #findEtgCommandes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EtgCommande instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EtgCommande> searchEtgCommandesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EtgCommandes list");
        return etgCommandeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EtgCommande instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EtgCommande> findEtgCommandes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EtgCommandes list");
        return etgCommandeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EtgCommande instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EtgCommande> filterEtgCommandes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EtgCommandes list");
        return etgCommandeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEtgCommandes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return etgCommandeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of EtgCommande instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEtgCommandes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EtgCommandes");
		return etgCommandeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEtgCommandeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return etgCommandeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/composite-id/etgLigneCommandes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the etgLigneCommandes instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EtgLigneCommande> findAssociatedEtgLigneCommandes(@RequestParam("id") Integer id,@RequestParam("numero") Integer numero,@RequestParam("client") String client,@RequestParam("dateCommande") Date dateCommande,@RequestParam("statut") Boolean statut,@RequestParam("total") BigDecimal total, Pageable pageable) {

        LOGGER.debug("Fetching all associated etgLigneCommandes");
        return etgCommandeService.findAssociatedEtgLigneCommandes(id, numero, client, dateCommande, statut, total, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EtgCommandeService instance
	 */
	protected void setEtgCommandeService(EtgCommandeService service) {
		this.etgCommandeService = service;
	}

}

