/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etg.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import ch.etg.application.exemple.etg.EtgArticle;
import ch.etg.application.exemple.etg.EtgArticleId;
import ch.etg.application.exemple.etg.EtgLigneCommande;
import ch.etg.application.exemple.etg.service.EtgArticleService;


/**
 * Controller object for domain model class EtgArticle.
 * @see EtgArticle
 */
@RestController("etg.EtgArticleController")
@Api(value = "EtgArticleController", description = "Exposes APIs to work with EtgArticle resource.")
@RequestMapping("/etg/EtgArticle")
public class EtgArticleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EtgArticleController.class);

    @Autowired
	@Qualifier("etg.EtgArticleService")
	private EtgArticleService etgArticleService;

	@ApiOperation(value = "Creates a new EtgArticle instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EtgArticle createEtgArticle(@RequestBody EtgArticle etgArticle) {
		LOGGER.debug("Create EtgArticle with information: {}" , etgArticle);

		etgArticle = etgArticleService.create(etgArticle);
		LOGGER.debug("Created EtgArticle with information: {}" , etgArticle);

	    return etgArticle;
	}

@ApiOperation(value = "Returns the EtgArticle instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EtgArticle getEtgArticle(@RequestParam("id") Integer id,@RequestParam("numero") Integer numero,@RequestParam("libelle") String libelle,@RequestParam("prix") BigDecimal prix) throws EntityNotFoundException {

        EtgArticleId etgarticleId = new EtgArticleId();
        etgarticleId.setId(id);
        etgarticleId.setNumero(numero);
        etgarticleId.setLibelle(libelle);
        etgarticleId.setPrix(prix);

        LOGGER.debug("Getting EtgArticle with id: {}" , etgarticleId);
        EtgArticle etgArticle = etgArticleService.getById(etgarticleId);
        LOGGER.debug("EtgArticle details with id: {}" , etgArticle);

        return etgArticle;
    }



    @ApiOperation(value = "Updates the EtgArticle instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EtgArticle editEtgArticle(@RequestParam("id") Integer id,@RequestParam("numero") Integer numero,@RequestParam("libelle") String libelle,@RequestParam("prix") BigDecimal prix, @RequestBody EtgArticle etgArticle) throws EntityNotFoundException {

        etgArticle.setId(id);
        etgArticle.setNumero(numero);
        etgArticle.setLibelle(libelle);
        etgArticle.setPrix(prix);

        LOGGER.debug("EtgArticle details with id is updated with: {}" , etgArticle);

        return etgArticleService.update(etgArticle);
    }


    @ApiOperation(value = "Deletes the EtgArticle instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEtgArticle(@RequestParam("id") Integer id,@RequestParam("numero") Integer numero,@RequestParam("libelle") String libelle,@RequestParam("prix") BigDecimal prix) throws EntityNotFoundException {

        EtgArticleId etgarticleId = new EtgArticleId();
        etgarticleId.setId(id);
        etgarticleId.setNumero(numero);
        etgarticleId.setLibelle(libelle);
        etgarticleId.setPrix(prix);

        LOGGER.debug("Deleting EtgArticle with id: {}" , etgarticleId);
        EtgArticle etgArticle = etgArticleService.delete(etgarticleId);

        return etgArticle != null;
    }


    @RequestMapping(value = "/numero/{numero}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching EtgArticle with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EtgArticle getByNumero(@PathVariable("numero") int numero) {
        LOGGER.debug("Getting EtgArticle with uniques key Numero");
        return etgArticleService.getByNumero(numero);
    }

    @RequestMapping(value = "/id/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching EtgArticle with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EtgArticle getByUniqueKeyId(@PathVariable("id") int id) {
        LOGGER.debug("Getting EtgArticle with uniques key UniqueKeyId");
        return etgArticleService.getByUniqueKeyId(id);
    }

    /**
     * @deprecated Use {@link #findEtgArticles(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EtgArticle instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EtgArticle> searchEtgArticlesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EtgArticles list");
        return etgArticleService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EtgArticle instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EtgArticle> findEtgArticles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EtgArticles list");
        return etgArticleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EtgArticle instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EtgArticle> filterEtgArticles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EtgArticles list");
        return etgArticleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEtgArticles(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return etgArticleService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of EtgArticle instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEtgArticles( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EtgArticles");
		return etgArticleService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEtgArticleAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return etgArticleService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/composite-id/etgLigneCommandes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the etgLigneCommandes instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EtgLigneCommande> findAssociatedEtgLigneCommandes(@RequestParam("id") Integer id,@RequestParam("numero") Integer numero,@RequestParam("libelle") String libelle,@RequestParam("prix") BigDecimal prix, Pageable pageable) {

        LOGGER.debug("Fetching all associated etgLigneCommandes");
        return etgArticleService.findAssociatedEtgLigneCommandes(id, numero, libelle, prix, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EtgArticleService instance
	 */
	protected void setEtgArticleService(EtgArticleService service) {
		this.etgArticleService = service;
	}

}

