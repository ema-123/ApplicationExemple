/*Copyright (c) 2018-2019 sqli.com All Rights Reserved.
 This software is the confidential and proprietary information of sqli.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sqli.com*/
package ch.etg.application.exemple.etg.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.sql.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import ch.etg.application.exemple.etg.EtgCommande;
import ch.etg.application.exemple.etg.EtgCommandeId;
import ch.etg.application.exemple.etg.EtgLigneCommande;


/**
 * ServiceImpl object for domain model class EtgCommande.
 *
 * @see EtgCommande
 */
@Service("etg.EtgCommandeService")
@Validated
public class EtgCommandeServiceImpl implements EtgCommandeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EtgCommandeServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("etg.EtgLigneCommandeService")
	private EtgLigneCommandeService etgLigneCommandeService;

    @Autowired
    @Qualifier("etg.EtgCommandeDao")
    private WMGenericDao<EtgCommande, EtgCommandeId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EtgCommande, EtgCommandeId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "etgTransactionManager")
    @Override
	public EtgCommande create(EtgCommande etgCommande) {
        LOGGER.debug("Creating a new EtgCommande with information: {}", etgCommande);

        List<EtgLigneCommande> etgLigneCommandes = etgCommande.getEtgLigneCommandes();

        if(etgLigneCommandes != null && Hibernate.isInitialized(etgLigneCommandes)) {
            if(!etgLigneCommandes.isEmpty()) {
                for(EtgLigneCommande _etgLigneCommande : etgLigneCommandes) {
                    _etgLigneCommande.setEtgCommande(etgCommande);
                }
            }
        }

        EtgCommande etgCommandeCreated = this.wmGenericDao.create(etgCommande);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(etgCommandeCreated);
    }

	@Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
	public EtgCommande getById(EtgCommandeId etgcommandeId) throws EntityNotFoundException {
        LOGGER.debug("Finding EtgCommande by id: {}", etgcommandeId);
        return this.wmGenericDao.findById(etgcommandeId);
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
	public EtgCommande findById(EtgCommandeId etgcommandeId) {
        LOGGER.debug("Finding EtgCommande by id: {}", etgcommandeId);
        try {
            return this.wmGenericDao.findById(etgcommandeId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No EtgCommande found with id: {}", etgcommandeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
    @Override
    public EtgCommande getByNumero(int numero) {
        Map<String, Object> numeroMap = new HashMap<>();
        numeroMap.put("numero", numero);

        LOGGER.debug("Finding EtgCommande by unique keys: {}", numeroMap);
        EtgCommande etgCommande = this.wmGenericDao.findByUniqueKey(numeroMap);

        if (etgCommande == null){
            LOGGER.debug("No EtgCommande found with given unique key values: {}", numeroMap);
            throw new EntityNotFoundException(String.valueOf(numeroMap));
        }

        return etgCommande;
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
    @Override
    public EtgCommande getByUniqueKeyId(int id) {
        Map<String, Object> uniqueKeyIdMap = new HashMap<>();
        uniqueKeyIdMap.put("id", id);

        LOGGER.debug("Finding EtgCommande by unique keys: {}", uniqueKeyIdMap);
        EtgCommande etgCommande = this.wmGenericDao.findByUniqueKey(uniqueKeyIdMap);

        if (etgCommande == null){
            LOGGER.debug("No EtgCommande found with given unique key values: {}", uniqueKeyIdMap);
            throw new EntityNotFoundException(String.valueOf(uniqueKeyIdMap));
        }

        return etgCommande;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "etgTransactionManager")
	@Override
	public EtgCommande update(EtgCommande etgCommande) throws EntityNotFoundException {
        LOGGER.debug("Updating EtgCommande with information: {}", etgCommande);

        List<EtgLigneCommande> etgLigneCommandes = etgCommande.getEtgLigneCommandes();

        if(etgLigneCommandes != null && Hibernate.isInitialized(etgLigneCommandes)) {
            if(!etgLigneCommandes.isEmpty()) {
                for(EtgLigneCommande _etgLigneCommande : etgLigneCommandes) {
                    _etgLigneCommande.setEtgCommande(etgCommande);
                }
            }
        }

        this.wmGenericDao.update(etgCommande);
        this.wmGenericDao.refresh(etgCommande);

        // Deleting children which are not present in the list.
        if(etgLigneCommandes != null && Hibernate.isInitialized(etgLigneCommandes) && !etgLigneCommandes.isEmpty()) {
            List<EtgLigneCommande> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, EtgLigneCommande.class,
                        new DaoUtils.ChildrenFilter("etgCommande", etgCommande, etgLigneCommandes)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            for(EtgLigneCommande _etgLigneCommande : _remainingChildren) {
                etgLigneCommandeService.delete(_etgLigneCommande);
            }
            etgCommande.setEtgLigneCommandes(etgLigneCommandes);
        }

        return etgCommande;
    }

    @Transactional(value = "etgTransactionManager")
	@Override
	public EtgCommande delete(EtgCommandeId etgcommandeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EtgCommande with id: {}", etgcommandeId);
        EtgCommande deleted = this.wmGenericDao.findById(etgcommandeId);
        if (deleted == null) {
            LOGGER.debug("No EtgCommande found with id: {}", etgcommandeId);
            throw new EntityNotFoundException(String.valueOf(etgcommandeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "etgTransactionManager")
	@Override
	public void delete(EtgCommande etgCommande) {
        LOGGER.debug("Deleting EtgCommande with {}", etgCommande);
        this.wmGenericDao.delete(etgCommande);
    }

	@Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
	public Page<EtgCommande> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EtgCommandes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
    @Override
    public Page<EtgCommande> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EtgCommandes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service etg for table EtgCommande to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "etgTransactionManager")
    @Override
    public Page<EtgLigneCommande> findAssociatedEtgLigneCommandes(Integer id, Integer numero, String client, Date dateCommande, Boolean statut, BigDecimal total, Pageable pageable) {
        LOGGER.debug("Fetching all associated etgLigneCommandes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("etgCommande.id = '" + id + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("etgCommande.numero = '" + numero + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("etgCommande.client = '" + client + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("etgCommande.dateCommande = '" + dateCommande + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("etgCommande.statut = '" + statut + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("etgCommande.total = '" + total + "'");

        return etgLigneCommandeService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EtgLigneCommandeService instance
	 */
	protected void setEtgLigneCommandeService(EtgLigneCommandeService service) {
        this.etgLigneCommandeService = service;
    }

}

